%h2#votes
  All
  = members_type(division.australian_house)
  Eligible to Vote

  \- sorted by
  - if sort.nil?
    party
  - elsif sort == "name"
    name
  - elsif sort == "constituency"
    electorate
  - elsif sort == "vote"
    vote
  - else
    - raise

%p
  Includes
  = members_type(division.australian_house)
  who were absent (or abstained) from this vote.

= render "sort_links", sort: sort, division: division

%table.table.table-striped
  %thead
    %tr
      %th Party
      %th Ayes
      %th Noes
  %tbody
    - division.whips.order(:party).each do |whip|
      - # Don't shown parties that haven't voted in this division
      - if whip.total_votes > 0
        %tr.party-row
          %th
            = whip.party_name
            %small.post-title.text-muted= '(' + fraction_to_percentage_display(whip.attendance_fraction, precision: 1) + ' turnout)'
          %td{:class => aye_vote_class(whip)}= whip.aye_votes_including_tells
          %td{:class => no_vote_class(whip)}= whip.no_votes_including_tells

        - # TODO: Order by minority within party (e.g. rebels first) then majority, then absent
        - members.where(party: whip.party).each do |member|
          %tr.member-row{:class => ('rebel' if member.rebel_on_division?(division))}
            %td
              = link_to member.name_without_title, member_path2(member)
              - if member.person.on_front_bench?(division.date)
                %span.text-muted (front bench)
              = link_to_if division.australian_house == 'representatives', member.electorate, electorate_path(member), :class => 'text-muted'

            %td{:colspan => '2'}= member.vote_on_division_without_tell(division)

    %tr
      %th.whip
        Totals
        %small.post-title.text-muted= '(' + fraction_to_percentage_display(division.attendance_fraction, precision: 1) + ' turnout)'
      %td{:class => aye_vote_total_class(division)}= division.aye_votes_including_tells
      %td{:class => no_vote_total_class(division)}= division.no_votes_including_tells
