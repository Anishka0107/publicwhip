.h1mppolicy
  %p.mp= link_to member.full_name2, member_path2(member)
  %p.voteexpl
    = policy_agreement_summary(policy, member.person)
    the policy
  %p.policy
    = link_to policy do
      %i
        %b
          = policy.name
  %p
    by
    %a{href: '#ratioexpl'} scoring
    %em.percent= fraction_to_percentage_display(member.person.agreement_fraction_with_policy(policy), precision: 1)
    compared to the votes below
- if display == 'motions'
  %p
    Someone who believes that
    %span.policytext= policy.description
    would cast votes described by the policy.
  = render 'policies/detailed_votes', member: member, policy: policy
- else
  = render 'policies/vote_summary_table', member: member, policy: policy

%h2#ratioexpl How the number is calculated

%p
  The MP's votes count towards a weighted average where the most important votes get
  #{pluralize(Distance.possible_points[:samestrong], "point")},
  less important votes get
  #{pluralize(Distance.possible_points[:same], "point")},
  and less important votes for which the MP was absent get
  #{pluralize(Distance.possible_points[:absent], "point")}.
  In important votes the MP gets awarded the full
  = pluralize(Distance.points[:samestrong], "point")
  for voting the same as the policy,
  = pluralize(Distance.points[:differstrong], "point")
  for voting against the policy, and
  = pluralize(Distance.points[:absentstrong], "point")
  for not voting. In less important votes, the MP gets
  = pluralize(Distance.points[:same], "point")
  for voting with the policy,
  = pluralize(Distance.points[:differ], "point")
  for voting against, and
  = Distance.points[:absent]
  (out of #{Distance.possible_points[:absent]})
  if absent.

%table.table
  %thead
    %tr.headings
      %th
      %th No of votes
      %th Points
      %th Out of
  %tbody
    %tr.jobevent
      %th Most important votes (#{pluralize(Distance.possible_points[:samestrong], "point")})
      %td &nbsp;
      %td &nbsp;
      %td &nbsp;
    %tr.evenstrong
      %td MP voted with policy
      %td.teller= policy_member_distance.nvotessamestrong
      %td= policy_member_distance.votes_same_strong_points
      %td= policy_member_distance.possible_same_strong_points
    %tr.evenstrong
      %td MP voted against policy
      %td.rebel= policy_member_distance.nvotesdifferstrong
      %td= policy_member_distance.votes_differ_strong_points
      %td= policy_member_distance.possible_differ_strong_points
    %tr.evenstrong
      %td MP absent
      %td.rebelteller= policy_member_distance.nvotesabsentstrong
      %td= policy_member_distance.votes_absent_strong_points
      %td= policy_member_distance.possible_absent_strong_points
    %tr.jobevent
      %th Less important votes (#{pluralize(Distance.possible_points[:same], "point")})
      %td &nbsp;
      %td &nbsp;
      %td &nbsp;
    %tr
      %td MP voted with policy
      %td.teller= policy_member_distance.nvotessame
      %td= policy_member_distance.votes_same_points
      %td= policy_member_distance.possible_same_points
    %tr
      %td MP voted against policy
      %td.rebel= policy_member_distance.nvotesdiffer
      %td= policy_member_distance.votes_differ_points
      %td= policy_member_distance.possible_differ_points
    %tr.jobevent
      %th Less important absentees (#{pluralize(Distance.possible_points[:absent], "point")})
      %td &nbsp;
      %td &nbsp;
      %td &nbsp;
    %tr
      %td MP absent*
      %td.rebelteller= policy_member_distance.nvotesabsent
      %td= policy_member_distance.votes_absent_points
      %td= policy_member_distance.possible_absent_points
    %tr.jobevent
      %th{:colspan => "2"} Total:
      %td= policy_member_distance.total_points
      %td= policy_member_distance.possible_total_points
    %tr
      %td{:colspan => "4"}
        %p
          *Pressure of other work means MPs or
          Senators are not always available to vote â€“ it does not always
          indicate they have abstained. Therefore, being absent on a less
          important vote makes a disproportionatly small
          difference.
%p
  agreement score = MP's points / total points
  \= #{policy_member_distance.total_points} / #{policy_member_distance.possible_total_points}
  \=
  = succeed "." do
    %b= fraction_to_percentage_display(member.person.agreement_fraction_with_policy(policy), precision: 1, format: "%n %")
